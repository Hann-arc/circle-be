// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  userName  String   @unique
  fullName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile   Profile?
  following Follows[] @relation("UserFollowers")
  followers Follows[] @relation("UserFollowing")
  Thread   Thread[]
  replies   Reply[]
  likes   Like[]
}

model Follows {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
}

model Thread {
  id        Int      @id @default(autoincrement())
  content   String?
  media     String?
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies Reply[]
  likes   Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId]) 
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String?
  media     String?
  threadId  Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  id        Int      @id @default(autoincrement())
  avatar    String?
  cover     String?
  bio       String?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
